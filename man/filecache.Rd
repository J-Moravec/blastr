% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filecache.r
\name{filecache}
\alias{filecache}
\title{Call function with on-disk caching}
\usage{
filecache(cache, f, ...)
}
\arguments{
\item{cache}{A path to cache file, a \code{.rds} file containing an environment, or an empty path.}

\item{f}{A function for which the result will be cached, functions themselves are not hashed,
see details and examples.}

\item{...}{Arguments to be passed to \code{f}. Arguments are forced to evaluate any promises and
then the argument list is hashed.}
}
\value{
A value resulting from calling \code{f} with arguments \code{...}.
}
\description{
This will perform on-disk of function \code{f}.
The function will be executed only if its output is not present in the cache.
Otherwise, the content of the cache is returned.
}
\details{
This will perform on-disk cachingg of function \code{f}.
First, the parameters are expanded and hashed using the \code{digest::digest} package.
Then the cache,stored as a RDS file is read and examined.
If it contains the hash, the content of the hash is returned.
Otherwise, the function is evaluated, the content is saved cached, and returned.

Note that the function itself is \emph{not} hashed. This is to avoid potential problems
with different versions of a function that provides identical output.
Use different file caches for different functions.
}
\examples{
\dontrun{
myfun = function(x) Sys.sleep(x)
filecache("cache.rds", myfun, 3)
filecache("cache.rds", myfun, 3) # shouldn't take any time
filecache("cache.rds", myfun, 2) # stored in the same cache
filecache("cache.rds", myfun, 2)

# dont do this
filecache("cache.rds", sum, 3) # returns incorrect result
                               # since hashed 3 is already in cache
}

}
\seealso{
The \code{\link[digest:digest]{digest::digest()}} function used to hash arguments.
\code{\link[base:readRDS]{base::saveRDS()}} and \code{\link[base:readRDS]{base::readRDS()}} for saving and reading the cache.
Packages such as \code{memoize} or \code{R.cache} implement much more comprehensive caching.
}
